/// <reference types="node" />
import { Connection, Keypair, PublicKey, Transaction } from '@solana/web3.js';
import { LibreplexCreator } from '@libreplex/idls/lib/types/libreplex_creator';
import { LibreplexMetadata } from '@libreplex/idls/lib/types/libreplex_metadata';
import { LibreplexNft } from '@libreplex/idls/lib/types/libreplex_nft';
import { LibreplexCreatorControls } from '@libreplex/idls/lib/types/libreplex_creator_controls';
import { Program, IdlAccounts, Provider } from '@coral-xyz/anchor';
import { RoyaltyConfig } from './createCollection';
export type MintFromCreatorControllerInput = {
    creatorControllerProgram: Program<LibreplexCreatorControls>;
    creatorProgram: Program<LibreplexCreator>;
    creatorController: PublicKey;
    mintKeyPair?: Keypair;
    phaseToMintIn?: string;
    merkleProofsForAllowLists?: {
        label: string;
        proof: Buffer[];
    }[];
    addTransferHookToMint?: {
        programId: PublicKey;
        authority: PublicKey;
    };
};
type MintFromCreatorControllerStateInput = {
    creator: PublicKey;
    targetPhase: IdlAccounts<LibreplexCreatorControls>['creatorController']['phases'][0];
    minterNumbers: PublicKey | null;
    collection: PublicKey;
} & Omit<MintFromCreatorControllerInput, 'phaseToMintIn' | 'creatorProgram'>;
export declare function mintFromCreatorControllerState(input: MintFromCreatorControllerStateInput): Promise<{
    method: import("@coral-xyz/anchor/dist/cjs/program/namespace/methods").MethodsBuilder<LibreplexCreatorControls, {
        name: "mint";
        accounts: [{
            name: "creatorController";
            isMut: true;
            isSigner: false;
        }, {
            name: "receiver";
            isMut: true;
            isSigner: true;
        }, {
            name: "receiverTokenAccount";
            isMut: true;
            isSigner: false;
        }, {
            name: "payer";
            isMut: true;
            isSigner: true;
        }, {
            name: "mint";
            isMut: true;
            isSigner: true;
        }, {
            name: "mintWrapper";
            isMut: true;
            isSigner: false;
        }, {
            name: "mintAuthority";
            isMut: false;
            isSigner: true;
        }, {
            name: "creator";
            isMut: true;
            isSigner: false;
        }, {
            name: "metadata";
            isMut: true;
            isSigner: false;
        }, {
            name: "collection";
            isMut: true;
            isSigner: false;
        }, {
            name: "collectionPermissions";
            isMut: true;
            isSigner: false;
        }, {
            name: "minterNumbers";
            isMut: true;
            isSigner: false;
            isOptional: true;
        }, {
            name: "systemProgram";
            isMut: false;
            isSigner: false;
        }, {
            name: "libreplexMetadataProgram";
            isMut: false;
            isSigner: false;
        }, {
            name: "libreplexNftProgram";
            isMut: false;
            isSigner: false;
        }, {
            name: "recentSlothashes";
            isMut: false;
            isSigner: false;
        }, {
            name: "attributeConfig";
            isMut: false;
            isSigner: false;
            isOptional: true;
        }, {
            name: "libreplexCreatorProgram";
            isMut: false;
            isSigner: false;
        }, {
            name: "tokenProgram";
            isMut: false;
            isSigner: false;
        }];
        args: [{
            name: "input";
            type: {
                defined: "MintInput";
            };
        }];
    } & {
        name: "mint";
    }>;
    mint: Keypair;
}>;
export declare function mintFromCreatorController(input: MintFromCreatorControllerInput): Promise<{
    method: import("@coral-xyz/anchor/dist/cjs/program/namespace/methods").MethodsBuilder<LibreplexCreatorControls, {
        name: "mint";
        accounts: [{
            name: "creatorController";
            isMut: true;
            isSigner: false;
        }, {
            name: "receiver";
            isMut: true;
            isSigner: true;
        }, {
            name: "receiverTokenAccount";
            isMut: true;
            isSigner: false;
        }, {
            name: "payer";
            isMut: true;
            isSigner: true;
        }, {
            name: "mint";
            isMut: true;
            isSigner: true;
        }, {
            name: "mintWrapper";
            isMut: true;
            isSigner: false;
        }, {
            name: "mintAuthority";
            isMut: false;
            isSigner: true;
        }, {
            name: "creator";
            isMut: true;
            isSigner: false;
        }, {
            name: "metadata";
            isMut: true;
            isSigner: false;
        }, {
            name: "collection";
            isMut: true;
            isSigner: false;
        }, {
            name: "collectionPermissions";
            isMut: true;
            isSigner: false;
        }, {
            name: "minterNumbers";
            isMut: true;
            isSigner: false;
            isOptional: true;
        }, {
            name: "systemProgram";
            isMut: false;
            isSigner: false;
        }, {
            name: "libreplexMetadataProgram";
            isMut: false;
            isSigner: false;
        }, {
            name: "libreplexNftProgram";
            isMut: false;
            isSigner: false;
        }, {
            name: "recentSlothashes";
            isMut: false;
            isSigner: false;
        }, {
            name: "attributeConfig";
            isMut: false;
            isSigner: false;
            isOptional: true;
        }, {
            name: "libreplexCreatorProgram";
            isMut: false;
            isSigner: false;
        }, {
            name: "tokenProgram";
            isMut: false;
            isSigner: false;
        }];
        args: [{
            name: "input";
            type: {
                defined: "MintInput";
            };
        }];
    } & {
        name: "mint";
    }>;
    mint: Keypair;
}>;
export type MintAssetUrl = {
    type: 'jsonUrl';
    value: string;
} | {
    type: 'imageUrl';
    value: string;
} | {
    type: 'renderedOnChain';
    programId: PublicKey;
    description: string | null;
};
export type MetadataExtension = {
    licenseUrl?: string;
    /**
     * The list of keys that can add their signature to your metadata.
     */
    permittedSigners?: PublicKey[];
    /**
     * Only works when part of a group.
     * Attribute defintions exist on the group.
     * List of pointers to the on chain attributes stored in the group.
     */
    onChainAttributes?: number[];
    royalties?: RoyaltyConfig;
};
export type MetadataData = {
    name: string;
    symbol: string;
    assetUrl: MintAssetUrl;
    extension?: MetadataExtension;
};
export type MintSingleInput = {
    provider: Provider;
    mintData: MetadataData;
    mintToCollection?: {
        collection: PublicKey;
        checkValidGroup: boolean;
        /**
         * If you are not the update auth of the group.
         * But have been given permission to add metadatas to it.
         * Set this to true.
         *
         * Defaults to false.
         */
        groupDelegate?: boolean;
    };
    mintKp?: Keypair;
    receiver?: PublicKey;
    transferHook?: TransferHookConfig;
    metadataProgram?: Program<LibreplexMetadata>;
    nftProgram?: Program<LibreplexNft>;
    updateAuthority?: PublicKey;
};
export declare function mintSingle(input: MintSingleInput): Promise<{
    method: import("@coral-xyz/anchor/dist/cjs/program/namespace/methods").MethodsBuilder<LibreplexMetadata, {
        name: "createMetadata";
        accounts: [{
            name: "payer";
            isMut: true;
            isSigner: true;
        }, {
            name: "metadata";
            isMut: true;
            isSigner: false;
            pda: {
                seeds: [{
                    kind: "const";
                    type: "string";
                    value: "metadata";
                }, {
                    kind: "account";
                    type: "publicKey";
                    path: "mint";
                }];
            };
        }, {
            name: "mint";
            isMut: false;
            isSigner: false;
        }, {
            name: "authority";
            isMut: false;
            isSigner: true;
        }, {
            name: "systemProgram";
            isMut: false;
            isSigner: false;
        }, {
            name: "invokedMigratorProgram";
            isMut: false;
            isSigner: false;
            isOptional: true;
        }];
        args: [{
            name: "metadataInput";
            type: {
                defined: "CreateMetadataInput";
            };
        }];
    } & {
        name: "createMetadata";
    }>;
    mint: Keypair;
}>;
type TransferHookConfig = {
    programId: PublicKey;
    authority: PublicKey;
};
export declare function setupLibreplexReadyMint(connection: Connection, payer: PublicKey, receiver: PublicKey, mintAuthority: PublicKey, freezeAuthority: PublicKey | null, decimals: number, mintKeypair: Keypair | undefined, metadata: PublicKey, transferHook?: TransferHookConfig, programId?: PublicKey): Promise<{
    transaction: Transaction;
    keypair: Keypair;
}>;
export {};
//# sourceMappingURL=mint.d.ts.map