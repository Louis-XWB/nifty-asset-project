import { Program, BN, Provider } from "@coral-xyz/anchor";
import { Keypair, PublicKey } from "@solana/web3.js";
import { LibreplexMetadata } from "@libreplex/idls/lib/types/libreplex_metadata";
type AttributeType = {
    name: string;
    possibleValues: (string | BN | number)[];
};
export type RoyaltyConfig = {
    bps: number;
    shares: {
        recipient: PublicKey;
        share: number;
    }[];
};
type SetupCollectionInput = {
    name: string;
    symbol: string;
    url: string;
    royalties: RoyaltyConfig;
    description: string;
    /**
    * The set of possible attributes for metadatas in your collection.
   */
    onChainAttributes?: AttributeType[];
    /**
     * The set of all addresses that are allowed to sign your collection.
     */
    permittedSigners?: PublicKey[];
};
export type Connector = {
    type: "provider";
    provider: Provider;
} | {
    type: "program";
    metadataProgram: Program<LibreplexMetadata>;
};
export declare function setupCollection(groupInfo: {
    connector: Connector;
    input: SetupCollectionInput;
    collectionAuthority: PublicKey;
    groupSeedKp?: Keypair;
}): Promise<{
    method: import("@coral-xyz/anchor/dist/cjs/program/namespace/methods").MethodsBuilder<LibreplexMetadata, {
        name: "createCollection";
        accounts: [{
            name: "authority";
            isMut: true;
            isSigner: true;
        }, {
            name: "collection";
            isMut: true;
            isSigner: false;
            pda: {
                seeds: [{
                    kind: "const";
                    type: "string";
                    value: "collection";
                }, {
                    kind: "account";
                    type: "publicKey";
                    path: "seed";
                }];
            };
        }, {
            name: "seed";
            isMut: false;
            isSigner: false;
        }, {
            name: "systemProgram";
            isMut: false;
            isSigner: false;
        }];
        args: [{
            name: "collectionInput";
            type: {
                defined: "CollectionInput";
            };
        }];
    } & {
        name: "createCollection";
    }>;
    collection: PublicKey;
}>;
export {};
//# sourceMappingURL=createCollection.d.ts.map