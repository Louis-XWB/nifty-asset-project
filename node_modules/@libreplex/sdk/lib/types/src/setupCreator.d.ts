import { Program } from "@coral-xyz/anchor";
import { LibreplexCreator } from "@libreplex/idls/lib/types/libreplex_creator";
import { LibreplexMetadata } from "@libreplex/idls/lib/types/libreplex_metadata";
import { LibreplexCreatorControls } from "@libreplex/idls/lib/types/libreplex_creator_controls";
import { PublicKey } from "@solana/web3.js";
import { CreatorControl } from "./creatorControls";
export type SetupCreatorData = {
    description: string;
    baseName: string;
    ordered: boolean;
    supply: number;
    symbol: string;
    baseUrl: {
        type: "json-prefix";
        url: string;
    } | {
        type: "chain-renderer";
        programId: PublicKey;
        description?: string;
    };
};
export type SetupCreatorInput = {
    mintAuthority: PublicKey;
    program: Program<LibreplexCreator>;
    metadataProgram: Program<LibreplexMetadata>;
    collection: PublicKey;
    creatorData: SetupCreatorData;
};
export type Phase = {
    start: Date;
    end: Date | null;
    label: string;
    control: CreatorControl[];
};
export declare function setupCreatorWithCustomSalePhases(input: SetupCreatorInput, creatorControllerProgram: Program<LibreplexCreatorControls>, salePhases: Phase[], checkGroupIsValid?: boolean): Promise<{
    method: import("@coral-xyz/anchor/dist/cjs/program/namespace/methods").MethodsBuilder<LibreplexCreator, {
        name: "createCreator";
        accounts: [{
            name: "signer";
            isMut: true;
            isSigner: true;
        }, {
            name: "creator";
            isMut: true;
            isSigner: false;
            pda: {
                seeds: [{
                    kind: "const";
                    type: "string";
                    value: "creator";
                }, {
                    kind: "arg";
                    type: {
                        defined: "CreateCreatorInput";
                    };
                    path: "create_creator_input.seed";
                }];
            };
        }, {
            name: "minterNumbers";
            isMut: true;
            isSigner: false;
            isOptional: true;
        }, {
            name: "systemProgram";
            isMut: false;
            isSigner: false;
        }];
        args: [{
            name: "creatorInput";
            type: {
                defined: "CreateCreatorInput";
            };
        }];
    } & {
        name: "createCreator";
    }>;
    creatorController: PublicKey;
    creator: PublicKey;
    minterNumbers: PublicKey | null;
}>;
export declare function setupCreator(input: SetupCreatorInput, checkGroupIsValid?: boolean): Promise<{
    method: import("@coral-xyz/anchor/dist/cjs/program/namespace/methods").MethodsBuilder<LibreplexCreator, {
        name: "createCreator";
        accounts: [{
            name: "signer";
            isMut: true;
            isSigner: true;
        }, {
            name: "creator";
            isMut: true;
            isSigner: false;
            pda: {
                seeds: [{
                    kind: "const";
                    type: "string";
                    value: "creator";
                }, {
                    kind: "arg";
                    type: {
                        defined: "CreateCreatorInput";
                    };
                    path: "create_creator_input.seed";
                }];
            };
        }, {
            name: "minterNumbers";
            isMut: true;
            isSigner: false;
            isOptional: true;
        }, {
            name: "systemProgram";
            isMut: false;
            isSigner: false;
        }];
        args: [{
            name: "creatorInput";
            type: {
                defined: "CreateCreatorInput";
            };
        }];
    } & {
        name: "createCreator";
    }>;
    creator: PublicKey;
    minterNumbers: PublicKey | null;
}>;
//# sourceMappingURL=setupCreator.d.ts.map