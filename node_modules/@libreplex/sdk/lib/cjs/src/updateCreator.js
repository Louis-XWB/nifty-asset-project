"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateCreator = void 0;
const web3_js_1 = require("@solana/web3.js");
const creatorControls_1 = require("./creatorControls");
function updateCreator(input) {
    return __awaiter(this, void 0, void 0, function* () {
        const { program, phases, creatorController } = input;
        const me = program.provider.publicKey;
        if (!me) {
            throw new Error("Missing provider. Are you sure your wallet is connected?");
        }
        const anchorPhases = [];
        for (const ph of phases) {
            const controls = [];
            for (const control of ph.control) {
                controls.push((0, creatorControls_1.controlToAnchor)(control));
            }
            anchorPhases.push({
                controls,
                end: ph.end ? ph.end.getTime() / 1000 : null,
                label: ph.label,
                start: ph.start.getTime() / 1000,
            });
        }
        return program.methods.update({
            phases: anchorPhases,
        }).accounts({
            systemProgram: web3_js_1.SystemProgram.programId,
            payer: me,
            updateAuthority: me,
            creatorController,
        });
    });
}
exports.updateCreator = updateCreator;
