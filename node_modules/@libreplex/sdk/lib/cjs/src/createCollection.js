"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupCollection = void 0;
const web3_js_1 = require("@solana/web3.js");
const pda_1 = require("./pda");
const programs_1 = require("./programs");
function setupCollection(groupInfo) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const { connector, input, collectionAuthority, groupSeedKp = web3_js_1.Keypair.generate() } = groupInfo;
        const collection = (0, pda_1.getCollectionAddress)(groupSeedKp.publicKey);
        const metadataProgram = connector.type === "program" ? connector.metadataProgram : yield (0, programs_1.loadMetadataProgram)(connector.provider);
        return {
            method: metadataProgram.methods.createCollection({
                permittedSigners: input.permittedSigners || [],
                attributeTypes: ((_a = input.onChainAttributes) === null || _a === void 0 ? void 0 : _a.map(v => {
                    return {
                        permittedValues: v.possibleValues,
                        continuedFromIndex: null,
                        continuedAtIndex: null,
                        deleted: false,
                        name: v.name,
                    };
                })) || [],
                description: input.description,
                name: input.name,
                symbol: input.symbol,
                url: input.url,
                royalties: input.royalties
            }).accounts({
                authority: collectionAuthority,
                seed: groupSeedKp.publicKey,
                systemProgram: web3_js_1.SystemProgram.programId,
                collection,
            }),
            collection,
        };
    });
}
exports.setupCollection = setupCollection;
