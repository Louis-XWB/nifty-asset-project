import { PublicKey, SystemProgram } from "@solana/web3.js";
import { LIBREPLEX_METADATA_PROGRAM_ID } from "./constants";
import { loadMetadataProgram } from "./programs";
export var UserPermission;
(function (UserPermission) {
    UserPermission[UserPermission["Update"] = 0] = "Update";
    UserPermission[UserPermission["Delete"] = 1] = "Delete";
    UserPermission[UserPermission["AddToGroup"] = 2] = "AddToGroup";
})(UserPermission || (UserPermission = {}));
export function getCollectionWideUserPermissionsAddress(collection, user, program = LIBREPLEX_METADATA_PROGRAM_ID) {
    return PublicKey.findProgramAddressSync([Buffer.from("permissions"), user.toBuffer(), collection.toBuffer()], program)[0];
}
function convertPermission(p) {
    if (p === UserPermission.AddToGroup) {
        return {
            addToGroup: {}
        };
    }
    if (p === UserPermission.Delete) {
        return {
            addToGroup: {}
        };
    }
    if (p === UserPermission.Update) {
        return {
            addToGroup: {}
        };
    }
    throw new Error("Invalid permission enum");
}
export async function setUserPermissionsForGroup({ connector, collection, user, permissions, groupUpdateAuthority, }) {
    const permissionsAccountAddress = getCollectionWideUserPermissionsAddress(collection, user);
    const metadataProgram = connector.type === "program" ? connector.metadataProgram : await loadMetadataProgram(connector.provider);
    const existingPermissionsInfo = await metadataProgram.provider.connection.getAccountInfo(permissionsAccountAddress);
    const anchorPermissions = permissions.map(convertPermission);
    if (!existingPermissionsInfo) {
        return metadataProgram.methods.delegateCollectionPermissions({
            permissions: anchorPermissions,
        }).accounts({
            collection,
            delegatedUser: user,
            systemProgram: SystemProgram.programId,
            updateAuthority: groupUpdateAuthority,
            userPermissions: permissionsAccountAddress
        });
    }
    return metadataProgram.methods.updatePermissions({
        permissions: anchorPermissions
    }).accounts({
        updateAuthority: groupUpdateAuthority,
        user: user,
        userPermissions: permissionsAccountAddress
    });
}
//# sourceMappingURL=groupPermissions.js.map